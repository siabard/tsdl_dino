#+BLOG: myblog
#+POSTID: 1014
#+DATE: [2024-02-27 Tue 11:54]
#+TITLE: tsdl로 게임 만들기 #6 한글/아스키코드 비트맵 출력하기
#+CATEGORY: OCaml, SDL
#+TAGS: OCaml, sdl2

* 비트맵 폰트 출력하기

비트맵으로 구성된 폰트를 출력해보자. 소스의 =assets/= 에는 아스키코드와 한글 조합코드를 위한 =ascii.png= 와 =hangul.png= 파일이 있다. 이 중 한글 조합코드는 8x4x4 벌의 도깨비 폰트에서 가져왔다.

** 애셋 관리

해당 파일을 관리하기위한 애셋 관리 코드를 먼저 작성한다.

애셋 모음을 관리하기위한 맵은 다음과 같다.

#+BEGIN_SRC

(** textures.ml 에 아래 코드 삽입 *)
module StringMap = Map.Make (String)

type tassets = { texture : Sdl.texture option }


(** globals.ml 에 아래 코드 삽입 *)
let assets : Textures.tassets Textures.StringMap.t ref =
  ref Textures.StringMap.empty


#+END_SRC

이제 에셋을 가져올 관리할 코드를 작성한다.

#+BEGIN_SRC


let add_textures renderer assets pathname name =
  match Tsdl_image.Image.load_texture renderer pathname with
  | Ok texture ->
      let asset = { texture = Some texture } in
      assets := StringMap.add name asset !assets;
      ()
  | Error _ ->
      Printf.printf "FAIL TO OPEN %s" name;
      ()

let clear_assets assets =
  let asset_list = StringMap.bindings assets |> List.map snd in
  List.iter
    (fun asset ->
      match asset with
      | { texture = Some texture } ->
          Sdl.destroy_texture texture;
          ()
      | _ -> ())
    asset_list


#+END_SRC

지정한 경로로 파일 이름을 지정하면 맵에 해당하는 이미지를 읽어 텍스쳐로 등록하게된다.

** 한글 조합 및 아스키 코드의 출력

한글 조합형 코드는 UCS-2 기반의 코드를 기반으로 초중종성을 뽑아낸다. 먼저 UTF8 코드는 UCS-2 코드로 변환하는 함수를 작성한다.

#+BEGIN_SRC


let utf8_to_ucs2 (utf8_str : string) : int list =
  let rec utf8_to_chars str idx acc =
    if idx >= String.length str then List.rev acc
    else
      let code_unit = String.get str idx in
      let char_length =
        if code_unit >= '\xC0' && code_unit <= '\xDF' then 2
        else if code_unit >= '\xE0' && code_unit <= '\xEF' then 3
        else if code_unit >= '\xF0' && code_unit <= '\xF7' then 4
        else 1
      in
      let utf8_char = String.sub str idx char_length in
      let ucs2_char =
        match char_length with
        | 1 -> Char.code utf8_char.[0]
        | 2 ->
            ((Char.code utf8_char.[0] land 0x1F) lsl 6)
            lor (Char.code utf8_char.[1] land 0x3F)
        | 3 ->
            ((Char.code utf8_char.[0] land 0x0F) lsl 12)
            lor ((Char.code utf8_char.[1] land 0x3F) lsl 6)
            lor (Char.code utf8_char.[2] land 0x3F)
        | 4 ->
            ((Char.code utf8_char.[0] land 0x07) lsl 18)
            lor ((Char.code utf8_char.[1] land 0x3F) lsl 12)
            lor ((Char.code utf8_char.[2] land 0x3F) lsl 6)
            lor (Char.code utf8_char.[3] land 0x3F)
        | _ -> failwith "Invalid UTF-8 sequence"
      in
      utf8_to_chars str (idx + char_length) (ucs2_char :: acc)
  in
  utf8_to_chars utf8_str 0 []

#+END_SRC

다음으로 UCS-2 코드에서 한글코드의 시작점인 AC00를 기점으로 초,중,종성에 대한 코드를 뽑는다.

#+BEGIN_SRC

type han_johab = { cho : int; mid : int; jong : int }

type han_bul = {
  cho_bul : int option;
  mid_bul : int option;
  jong_bul : int option;
}

let charcode_to_han_jaso charcode =
  let num_of_jong = 28 in
  let num_of_mid = 21 in
  let hancode = charcode - 0xac00 in
  let jong = hancode mod num_of_jong in
  let cho = (hancode - jong) / num_of_jong / num_of_mid in
  let mid = (hancode - jong) / num_of_jong mod num_of_mid in
  { cho; mid; jong }

let jaso_to_bul johab =
  match johab with
  | { cho; jong; mid } ->
      if jong = 0 then
        {
          cho_bul =
            (if mid = 20 || (mid >= 0 && mid <= 7) then Some 0
             else if mid = 8 || mid = 12 || mid = 18 then Some 1
             else if mid = 13 || mid = 17 then Some 2
             else if mid = 19 || (mid >= 9 && mid <= 11) then Some 3
             else if mid >= 14 && mid <= 16 then Some 4
             else None);
          mid_bul =
            (if cho = 0 || cho = 1 then Some 0
             else if cho >= 2 && cho <= 18 then Some 1
             else None);
          jong_bul = None;
        }
      else
        {
          cho_bul =
            (if mid = 20 || (mid >= 0 && mid <= 7) then Some 5
             else if mid = 8 || mid = 12 || mid = 13 || mid = 17 || mid = 18
             then Some 6
             else if
               mid = 19 || (mid >= 9 && mid <= 11) || (mid >= 14 && mid <= 16)
             then Some 7
             else None);
          mid_bul =
            (if cho = 0 || cho = 1 then Some 2
             else if cho >= 2 && cho <= 18 then Some 3
             else None);
          jong_bul =
            (if mid = 0 || mid = 2 || mid = 9 then Some 0
             else if
               mid = 4 || mid = 6 || mid = 11 || mid = 14 || mid = 16
               || mid = 19 || mid = 20
             then Some 1
             else if
               mid = 1 || mid = 3 || mid = 5 || mid = 7 || mid = 10 || mid = 15
             then Some 2
             else if mid = 8 || mid = 12 || mid = 13 || mid = 17 || mid = 18
             then Some 3
             else None);
        }

#+END_SRC

비트맵 폰트를 보면 알겠지만, 초,중,종성별로 각기 8종, 4종, 4종의 형태가 있다. 이는 종성, 중성 자소값의 조합에 따라 결정되는 것으로 자소와 벌의 값을 알면 폰트의 위치를 파악할 수 있다.

아스키 문자는 가로 8개, 세로 16줄 형태로 구성되어있으며, 아스키코드는 0~127 까지이므로, 다음과 같이 위치를 판별할 수 있다.

#+BEGIN_SRC

let is_hangul charcode =
  charcode >= 0xac00 && charcode <= 0xd7a3

let is_ascii charcode =
  charcode >= 0x0000 && charcode <= 0x007f
                        

let ascii_font_pos charcode =
  let ascii_height = 16 in
  let quo = charcode / ascii_height in
  let rem = charcode mod ascii_height in
  (quo, rem)

#+END_SRC

한글 폰트의 크기는 16x16 이며, 영문 폰트의 크기는 8x16 이다. 그러므로 다음과 같이 지정한 텍스쳐에 맞추어 문자를 출력하도록 한다.

#+BEGIN_SRC


let draw_hangul renderer texture charcode x y =
  let han_width = 16 in
  let han_height = 16 in
  let jaso = charcode_to_han_jaso charcode in
  let bul = jaso_to_bul jaso in
  let cho_rect =
    match bul.cho_bul with
    | Some bul ->
      Sdl.Rect.create ~x:(jaso.cho * han_width) ~y:(bul * han_height) ~w:han_width ~h:han_height
    | None ->
      Sdl.Rect.create ~x:0 ~y:0 ~w:0 ~h:0
  in
  let mid_rect =
    match bul.mid_bul with
    | Some bul ->
      Sdl.Rect.create ~x:(jaso.mid * han_width) ~y:((bul + 8) * han_height) ~w:han_width ~h:han_height
    | None ->
      Sdl.Rect.create ~x:0 ~y:0 ~w:0 ~h:0
     
  in
  let jong_rect =
    match bul.jong_bul with
    | Some bul ->
      Sdl.Rect.create ~x:(jaso.jong * han_width) ~y:((bul + 12) * han_height) ~w:han_width ~h:han_height
    | None ->
      Sdl.Rect.create ~x:0 ~y:0 ~w:0 ~h:0
  in
  let dest_rect = Sdl.Rect.create ~x:x ~y:y ~w:han_width ~h:han_height
  in
  
  ignore (Sdl.render_copy_ex ~src:cho_rect ~dst:dest_rect renderer texture 0.0 None Sdl.Flip.none);
  ignore (Sdl.render_copy_ex ~src:mid_rect ~dst:dest_rect renderer texture 0.0 None Sdl.Flip.none);
  ignore (Sdl.render_copy_ex ~src:jong_rect ~dst:dest_rect renderer texture 0.0 None Sdl.Flip.none);
  ()


let draw_ascii renderer texture charcode x y =
  let ascii_width = 8 in
  let ascii_height = 16 in
  let asc_row, asc_col = ascii_font_pos charcode in
  let src_rect = Sdl.Rect.create ~x:(asc_col * ascii_width) ~y:(asc_row * ascii_height) ~w:ascii_width ~h:ascii_height in
  let dst_rect = Sdl.Rect.create ~x:x ~y:y ~w:ascii_width ~h:ascii_height in
  ignore (Sdl.render_copy_ex ~src:src_rect ~dst:dst_rect renderer texture 0.0 None Sdl.Flip.none)



#+END_SRC

이제 한글, 아스키에맞추어서 필요한 비트맵 폰트를 출력하면 된다.

#+BEGIN_SRC


let draw_string renderer ascii_texture hangul_texture charcodes x y =
  let han_width = 16 in
  let ascii_width = 8 in
  let new_x = ref x in
  List.iter (fun charcode ->
      if is_hangul charcode then
        begin
          draw_hangul renderer hangul_texture charcode !new_x y;
          new_x := !new_x + han_width
        end
      else
        begin
          draw_ascii renderer ascii_texture charcode !new_x y;
          new_x := !new_x + ascii_width
        end
    ) charcodes

  
#+END_SRC

** 실제 코드에서의 사용

우선 필요한 애셋을 읽어들인다.

#+BEGIN_SRC

              Tsdl_dino.Textures.add_textures r Tsdl_dino.Globals.assets
                "assets/hangul.png" "hangul";
              Tsdl_dino.Textures.add_textures r Tsdl_dino.Globals.assets
                "assets/ascii.png" "ascii";
  
#+END_SRC

해당 에셋을 읽어들였다면, 아스키와 한글을 출력할 애셋을 확인하고, 이에 따라 출력하도록 한다.

#+BEGIN_SRC

                let ascii_asset =
                  Tsdl_dino.Textures.StringMap.find "ascii"
                    !Tsdl_dino.Globals.assets
                in
                let hangul_asset =
                  Tsdl_dino.Textures.StringMap.find "hangul"
                    !Tsdl_dino.Globals.assets
                in
                begin
                  (match ascii_asset, hangul_asset with
                   | { texture = Some ascii_texture}, {texture = Some hangul_texture} ->
                     Tsdl_dino.Bitmap_font.draw_string r ascii_texture hangul_texture (Tsdl_dino.Bitmap_font.utf8_to_ucs2 "안녕하세요? 한국... Hello World") 20 140
                   | _ -> ()
                  );

                end;  
  
#+END_SRC

