#+BLOG: myblog
#+POSTID: 1009
#+DATE: [2024-02-26 Mon 14:45]
#+TITLE: tsdl로 게임 만들기 #5 키보드 조작 검출하기
#+CATEGORY: OCaml, SDL
#+TAGS: OCaml, sdl2

* 키보드 조작 검출

** 키보드 이벤트 등록

=Sdl.event= 를 관리 가능한 이벤트로 전환한다. 다음과 같이 관리할 이벤트를 정의한다.

#+BEGIN_SRC
module Event = struct
  type key =
    | A
    | B
    | C
    | D
    | E
    | F
    | G
    | H
    | I
    | J
    | K
    | L
    | M
    | N
    | O
    | P
    | Q
    | R
    | S
    | T
    | U
    | V
    | W
    | X
    | Y
    | Z
    | K1
    | K2
    | K3
    | K4
    | K5
    | K6
    | K7
    | K8
    | K9
    | F1
    | F2
    | F3
    | F4
    | F5
    | F6
    | F7
    | F8
    | F9
    | F10
    | F11
    | F12
    | Enter
    | Space
    | Left
    | Right
    | Up
    | Down
    | Escape
  [@@deriving show, eq]

  type t = Quit | Key of { key : key; down : bool } | NoEvent

end
#+END_SRC

 일반적으로 키 눌림을 계산할 것이다. 키눌림을 검사하기 위해 다음과 같이 관련 변수를 추가한다.

#+BEGIN_SRC


  let pressed_key : (key, int) Hashtbl.t = Hashtbl.create 54
  let released_key : (key, int) Hashtbl.t = Hashtbl.create 54
  let hold_key : (key, int) Hashtbl.t = Hashtbl.create 54

#+END_SRC

이제 다음으로 주어진 이벤트가 발생했을 때, 어떤 키가 눌렸는지, 놓였는지를 알려주는 함수를 생성한다. =clear_key=  는 매 프레임당 키눌림 상태를 초기화할 것이다. =of_sdl= 은 =Sdl.event= 를 우리가 관리하는 이벤트로 변환하는 함수이다.
 
#+BEGIN_SRC
  let handle_key event event_typ =
    let open Sdl.Event in
    let down =
      match event_typ with
      | `Key_up -> false
      | `Key_down -> true
      | _ -> failwith "Not a key"
    in
    let exception UnhandledKey in
    let key = Sdl.Scancode.enum (get event keyboard_scancode) in
    try
      let key =
        match key with
        | `A -> A
        | `B -> B
        | `C -> C
        | `D -> D
        | `E -> E
        | `F -> F
        | `G -> G
        | `H -> H
        | `I -> I
        | `J -> J
        | `K -> K
        | `L -> L
        | `M -> M
        | `N -> N
        | `O -> O
        | `P -> P
        | `Q -> Q
        | `R -> R
        | `S -> S
        | `T -> T
        | `U -> U
        | `V -> V
        | `W -> W
        | `X -> X
        | `Y -> Y
        | `Z -> Z
        | `K1 -> K1
        | `K2 -> K2
        | `K3 -> K3
        | `K4 -> K4
        | `K5 -> K5
        | `K6 -> K6
        | `K7 -> K7
        | `K8 -> K8
        | `K9 -> K9
        | `F1 -> F1
        | `F2 -> F2
        | `F3 -> F3
        | `F4 -> F4
        | `F5 -> F5
        | `F6 -> F6
        | `F7 -> F7
        | `F8 -> F8
        | `F9 -> F9
        | `F10 -> F10
        | `F11 -> F11
        | `F12 -> F12
        | `Return -> Enter
        | `Space -> Space
        | `Left -> Left
        | `Right -> Right
        | `Up -> Up
        | `Down -> Down
        | `Escape -> Escape
        | _ -> raise_notrace UnhandledKey
      in
      Key { down; key }
    with UnhandledKey -> NoEvent

  let clear_key () =
    Hashtbl.clear pressed_key;
    Hashtbl.clear released_key;
    ()

  let of_sdl event =
    let t = Sdl.Event.(enum (get event typ)) in
    match t with
    | `Quit -> Quit
    | `Key_down | `Key_up -> handle_key event t
    | _ -> NoEvent

#+END_SRC

** 메인에서의 처리

메인에서 매 프레임은 다음과 같이 시작한다.

#+BEGIN_SRC

              let rec game_loop () =
                ignore (Tsdl_dino.Event.Event.clear_key ());
                ...
#+END_SRC

이벤트 루프는 키 눌림 상태를 모두 초기화하는 것으로 시작한다. 그렇다면 이벤트 처리부분에서는 눌림과 놓임 상태에 대해 처리해야한다.

#+BEGIN_SRC

                (match event with
                ...
                | Event.Key { key; down } ->
                    if down then (
                      Hashtbl.replace Event.pressed_key key 1;
                      Hashtbl.replace Event.hold_key key 1)
                    else (
                      Hashtbl.replace Event.released_key key 1;
                      Hashtbl.remove Event.hold_key key)
                | _ -> ());

#+END_SRC

=Event.Key= 에서는 눌렸을 때, 그리고 놓였을 때 어떻게 할지를 판단한다. =event=는 =Event.of_sdl= 을 통해 우리가 관리하는 이벤트로 구성되었음을 기억하자.

** 키보드 입력 처리

=GameMap= 모듈에서는 =update= 메서드에서 다양한 처리를 하나로 묶는다. 여기에서 =update_input= 은 키 눌림 상태인 =Event.pressed_key=, =Event.hold_key=, =Event.released_key= 를 토대로 키 눌림처리를 진행한다.

#+BEGIN_SRC


  let update_input entities =
    let entity_list = Entities.get_list entities in
    let new_transform = ref { dx = 0.0; dy = 0.0 } in
    List.iter
      (fun ele ->
        let id = ele.id in
        let transform = ele.transform in
        let cinput = ele.cinput in
        match (cinput, transform) with
        | Some _, Some _ ->
            (match Hashtbl.find_opt Event.Event.hold_key Event.Event.W with
            | Some 1 ->
                new_transform :=
                  {
                    dx = !new_transform.dx +. 1.0;
                    dy = !new_transform.dy +. 1.0;
                  };
                ()
            | _ -> ());
            Entities.update_transform entities id !new_transform
        | _, _ -> ())
      entity_list

#+END_SRC

위의 모듈을 보면 각 엔터티에서 =cinput= 관련 컴포넌트가 있는 경우, =transform=에 해당 값을 전달한다.
=new_transform=은 매 =update= 주기마다 0으로 초기된다는 것을 기억하자.

이제 필요한 키보드에 대해 관련 작업을 처리하면 된다.
